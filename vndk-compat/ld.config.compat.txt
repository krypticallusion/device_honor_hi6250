# Copyright (C) 2017 The Android Open Source Project
#
# Bionic loader config file.
#

# Don't change the order here.
dir.system = /system/bin/
dir.system = /system/xbin/
dir.system = /product/bin/
dir.vendor = /odm/bin
dir.vendor = /vendor/bin/
dir.vendor = /data/nativetest/odm
dir.vendor = /data/nativetest64/odm
dir.vendor = /data/benchmarktest/odm
dir.vendor = /data/benchmarktest64/odm
dir.vendor = /data/nativetest/vendor
dir.vendor = /data/nativetest64/vendor
dir.vendor = /data/benchmarktest/vendor
dir.vendor = /data/benchmarktest64/vendor
dir.system = /data/nativetest
dir.system = /data/nativetest64
dir.system = /data/benchmarktest
dir.system = /data/benchmarktest64

dir.postinstall = /postinstall

[system]
additional.namespaces = sphal,vndk,rs

###############################################################################
# "default" namespace
#
# Framework-side code runs in this namespace. Anything from /vendor partition
# can't be loaded in this namespace.
###############################################################################
namespace.default.isolated = false
#namespace.default.search.paths = /system/${LIB}:/vendor/${LIB}:/product/${LIB}
#namespace.default.permitted.paths = /system/${LIB}:/vendor/${LIB}:/product/${LIB}

#namespace.default.asan.search.paths = /data/asan/system/${LIB}:/system/${LIB}:/data/asan/vendor/${LIB}:/vendor/${LIB}
#namespace.default.asan.permitted.paths = /data/asan/system/${LIB}:/system/${LIB}:/data/asan/vendor/${LIB}:/vendor/${LIB}

# TODO(b/37013858): remove all dependencies to /vendor/lib from system processes
# When this is done, comment out following three lines and remove the three
# lines above
#namespace.default.isolated = true
#namespace.default.search.paths = /system/${LIB}
#namespace.default.permitted.paths = /system/${LIB}
#
#namespace.default.asan.search.paths = /data/asan/system/${LIB}:/system/${LIB}
#namespace.default.asan.permitted.paths = /data/asan/system/${LIB}:/system/${LIB}

namespace.default.search.paths  = /system/${LIB}
namespace.default.search.paths  += /odm/${LIB}
namespace.default.search.paths  += /vendor/${LIB}
namespace.default.search.paths  += /product/${LIB}

namespace.default.asan.search.paths = /data/asan/system/${LIB} 
namespace.default.asan.search.paths += /system/${LIB} 
namespace.default.asan.search.paths += /data/asan/odm/${LIB} 
namespace.default.asan.search.paths += /odm/${LIB} 
namespace.default.asan.search.paths += /data/asan/vendor/${LIB} 
namespace.default.asan.search.paths += /vendor/${LIB} 
namespace.default.asan.search.paths += /data/asan/product/${LIB}
namespace.default.asan.search.paths +=           /product/${LIB}


#########################################################################
# "sphal" namespace
#
# SP-HAL(Sameprocess-HAL)s are the only vendor libraries that are allowed to be
# loaded inside system processes. libEGL_<chipset>.so, libGLESv2_<chipset>.so,
# android.hardware.graphics.mapper@2.0-impl.so, etc are SP-HALs.
#
# This namespace is exclusivly for SP-HALs. When the framework tries to dynami-
# cally load SP-HALs, android_dlopen_ext() is used to explicitly specifying
# that they should be searched and loaded from this namespace.
#
# Note that there is no link from the default namespace to this namespace.
###############################################################################
namespace.sphal.isolated = true
namespace.sphal.visible = true
#namespace.sphal.search.paths = /vendor/${LIB}/egl:/vendor/${LIB}/hw:/vendor/${LIB}:/odm/${LIB}
#namespace.sphal.permitted.paths = /vendor/${LIB}:/odm/${LIB}

#namespace.sphal.asan.search.paths = /data/asan/vendor/${LIB}/egl:/vendor/${LIB}/egl:/data/asan/vendor/${LIB}/hw:/vendor/${LIB}/hw:/data/asan/vendor/${LIB}:/vendor/${LIB}:/vendor/${LIB}:/data/asan/odm/${LIB}:/odm/${LIB}
#namespace.sphal.asan.permitted.paths = /data/asan/vendor/${LIB}:/vendor/${LIB}:/vendor/${LIB}:/data/asan/odm/${LIB}:/odm/${LIB}

namespace.sphal.search.paths = /odm/${LIB} 
namespace.sphal.search.paths += /vendor/${LIB}
namespace.sphal.permitted.paths = /odm/${LIB} 
namespace.sphal.permitted.paths += /vendor/${LIB}
namespace.sphal.asan.search.paths = /data/asan/odm/${LIB} 
namespace.sphal.asan.search.paths += /odm/${LIB} 
namespace.sphal.asan.search.paths += /data/asan/vendor/${LIB} 
namespace.sphal.asan.search.paths += /vendor/${LIB}
namespace.sphal.asan.permitted.paths = /data/asan/odm/${LIB} 
namespace.sphal.asan.permitted.paths += /odm/${LIB} 
namespace.sphal.asan.permitted.paths += /data/asan/vendor/${LIB}
namespace.sphal.asan.permitted.paths +=           /vendor/${LIB}

# Once in this namespace, access to libraries in /system/lib is restricted. Only
# libs listed here can be used.
namespace.sphal.links = default,vndk,rs

# WARNING: only NDK libs can be listed here.
#namespace.sphal.link.default.shared_libs = libc.so:libm.so:libdl.so:libstdc++.so:liblog.so:libnativewindow.so:libEGL.so:libsync.so:libGLESv1_CM.so:libGLESv2.so:libvndksupport.so:libz.so
namespace.sphal.link.default.shared_libs = libEGL.so:libGLESv1_CM.so:libGLESv2.so:libGLESv3.so:libRS.so:libandroid_net.so:libc.so:libclang_rt.asan-aarch64-android.so:libclang_rt.asan-arm-android.so:libdl.so:liblog.so:libm.so:libmediandk.so:libnativewindow.so:libneuralnetworks.so:libsync.so:libvndksupport.so:libvulkan.so:libz.so 
namespace.sphal.link.default.shared_libs += libclang_rt.asan-aarch64-android.so:libclang_rt.ubsan_standalone-aarch64-android.so:libclang_rt.tsan-aarch64-android.so:libclang_rt.asan-arm-android.so:libclang_rt.ubsan_standalone-arm-android.so:libclang_rt.tsan-arm-android.so


# WARNING: only VNDK-SP libs can be listed here. DO NOT EDIT this line.
#namespace.sphal.link.vndk.shared_libs = android.hardware.renderscript@1.0.so:android.hardware.graphics.allocator@2.0.so:android.hardware.graphics.mapper@2.0.so:android.hardware.graphics.common@1.0.so:android.hidl.base@1.0.so:android.hidl.memory@1.0.so:libhwbinder.so:libbase.so:libcutils.so:libhardware.so:libhidlbase.so:libhidlmemory.so:libhidltransport.so:libion.so:libutils.so:libc++.so
namespace.sphal.link.vndk.shared_libs = android.hardware.graphics.common@1.0.so:android.hardware.graphics.common@1.1.so:android.hardware.graphics.mapper@2.0.so:android.hardware.graphics.mapper@2.1.so:android.hardware.renderscript@1.0.so:android.hidl.memory.token@1.0.so:android.hidl.memory@1.0.so:android.hidl.memory@1.0-impl.so:libRSCpuRef.so:libRSDriver.so:libRS_internal.so:libbase.so:libbcinfo.so:libc++.so:libcutils.so:libhardware.so:libhidlbase.so:libhidlmemory.so:libhidltransport.so:libhwbinder.so:libhwbinder_noltopgo.so:libion.so:liblzma.so:libunwindstack.so:libutils.so:libutilscallstack.so

# Renderscript gets separate namespace
namespace.sphal.link.rs.shared_libs = libRS_internal.so

###############################################################################
# "rs" namespace
#
# This namespace is exclusively for Renderscript internal libraries.
# This namespace has slightly looser restriction than the vndk namespace because
# of the genuine characteristics of Renderscript; /data is in the permitted path
# to load the compiled *.so file and libmediandk.so can be used here.
###############################################################################
namespace.rs.isolated = true
namespace.rs.visible = true
#namespace.rs.search.paths = /vendor/${LIB}/vndk-sp:/system/${LIB}/vndk-sp-compat:/vendor/${LIB}
#namespace.rs.permitted.paths = /vendor/${LIB}:/data

#namespace.rs.asan.search.paths = /data/asan/vendor/${LIB}/vndk-sp:/vendor/${LIB}/vndk-sp:/data/asan/system/${LIB}/vndk-sp:/system/${LIB}/vndk-sp-compat:/data/asan/vendor/${LIB}:/vendor/${LIB}
#namespace.rs.asan.permitted.paths = /data/asan/vendor/${LIB}:/vendor/${LIB}:/data



namespace.rs.search.paths = /odm/${LIB}/vndk-sp 
namespace.rs.search.paths += /vendor/${LIB}/vndk-sp 
namespace.rs.search.paths += /system/${LIB}/vndk-compat 
namespace.rs.search.paths += /odm/${LIB} 
namespace.rs.search.paths += /vendor/${LIB}
namespace.rs.permitted.paths = /odm/${LIB} 
namespace.rs.permitted.paths += /vendor/${LIB} 
namespace.rs.permitted.paths += /data
namespace.rs.asan.search.paths = /data/asan/odm/${LIB}/vndk-sp 
namespace.rs.asan.search.paths += /odm/${LIB}/vndk-sp 
namespace.rs.asan.search.paths += /data/asan/vendor/${LIB}/vndk-sp 
namespace.rs.asan.search.paths += /vendor/${LIB}/vndk-sp 
namespace.rs.asan.search.paths += /data/asan/system/${LIB}/vndk-compat 
namespace.rs.asan.search.paths += /system/${LIB}/vndk-compat 
namespace.rs.asan.search.paths += /data/asan/odm/${LIB} 
namespace.rs.asan.search.paths += /odm/${LIB} 
namespace.rs.asan.search.paths += /data/asan/vendor/${LIB} 
namespace.rs.asan.search.paths += /vendor/${LIB}
namespace.rs.asan.permitted.paths = /data/asan/odm/${LIB} 
namespace.rs.asan.permitted.paths += /odm/${LIB} 
namespace.rs.asan.permitted.paths += /data/asan/vendor/${LIB} 
namespace.rs.asan.permitted.paths += /vendor/${LIB}
namespace.rs.asan.permitted.paths += /data

namespace.rs.links = default,vndk
#namespace.rs.link.default.shared_libs = libc.so:libm.so:libdl.so:libstdc++.so:liblog.so:libnativewindow.so:libEGL.so:libsync.so:libGLESv1_CM.so:libGLESv2.so:libmediandk.so:libvndksupport.so:libz.so:libft2.so
#namespace.rs.link.vndk.shared_libs = android.hardware.renderscript@1.0.so:android.hardware.graphics.allocator@2.0.so:android.hardware.graphics.mapper@2.0.so:android.hardware.graphics.common@1.0.so:android.hidl.base@1.0.so:android.hidl.memory@1.0.so:libhwbinder.so:libbase.so:libcutils.so:libhardware.so:libhidlbase.so:libhidlmemory.so:libhidltransport.so:libion.so:libutils.so:libc++.so
namespace.rs.link.default.shared_libs = libEGL.so:libGLESv1_CM.so:libGLESv2.so:libGLESv3.so:libRS.so:libandroid_net.so:libc.so:libclang_rt.asan-aarch64-android.so:libclang_rt.asan-arm-android.so:libdl.so:liblog.so:libm.so:libmediandk.so:libnativewindow.so:libneuralnetworks.so:libsync.so:libvndksupport.so:libvulkan.so:libz.so 
namespace.rs.link.default.shared_libs += libclang_rt.asan-aarch64-android.so:libclang_rt.ubsan_standalone-aarch64-android.so:libclang_rt.tsan-aarch64-android.so:libclang_rt.asan-arm-android.so:libclang_rt.ubsan_standalone-arm-android.so:libclang_rt.tsan-arm-android.so

# Private LLNDK libs (e.g. libft2.so) are exceptionally allowed to this 
# namespace because RS framework libs are using them.
namespace.rs.link.default.shared_libs += libft2.so
namespace.rs.link.vndk.shared_libs = android.hardware.graphics.common@1.0.so:android.hardware.graphics.common@1.1.so:android.hardware.graphics.mapper@2.0.so:android.hardware.graphics.mapper@2.1.so:android.hardware.renderscript@1.0.so:android.hidl.memory.token@1.0.so:android.hidl.memory@1.0.so:android.hidl.memory@1.0-impl.so:libRSCpuRef.so:libRSDriver.so:libRS_internal.so:libbase.so:libbcinfo.so:libc++.so:libcutils.so:libhardware.so:libhidlbase.so:libhidlmemory.so:libhidltransp


###############################################################################
# "vndk" namespace
#
# This namespace is exclusively for vndk-sp libs.
###############################################################################
namespace.vndk.isolated = true
namespace.vndk.visible = true
#namespace.vndk.search.paths = /vendor/${LIB}/vndk-sp:/system/${LIB}/vndk-sp-compat
#namespace.vndk.permitted.paths = /vendor/${LIB}/hw:/vendor/${LIB}/egl

#namespace.vndk.asan.search.paths = /data/asan/vendor/${LIB}/vndk-sp:/vendor/${LIB}/vndk-sp:/data/asan/system/${LIB}/vndk-sp:/system/${LIB}/vndk-sp-compat
#namespace.vndk.asan.permitted.paths = /data/asan/vendor/${LIB}/hw:/vendor/${LIB}/hw:/data/asan/vendor/${LIB}/egl:/vendor/${LIB}/eg
namespace.vndk.search.paths = /odm/${LIB}/vndk-sp 
namespace.vndk.search.paths += /vendor/${LIB}/vndk-sp 
namespace.vndk.search.paths += /system/${LIB}/vndk-compat
namespace.vndk.permitted.paths = /odm/${LIB}/hw 
namespace.vndk.permitted.paths += /odm/${LIB}/egl 
namespace.vndk.permitted.paths += /vendor/${LIB}/hw 
namespace.vndk.permitted.paths += /vendor/${LIB}/egl
# This is exceptionally required since android.hidl.memory@1.0-impl.so is 
# here
namespace.vndk.permitted.paths += /system/${LIB}/vndk-compat/hw
namespace.vndk.asan.search.paths = /data/asan/odm/${LIB}/vndk-sp 
namespace.vndk.asan.search.paths += /odm/${LIB}/vndk-sp 
namespace.vndk.asan.search.paths += /data/asan/vendor/${LIB}/vndk-sp 
namespace.vndk.asan.search.paths += /vendor/${LIB}/vndk-sp 
namespace.vndk.asan.search.paths += /data/asan/system/${LIB}/vndk-compat 
namespace.vndk.asan.search.paths += /system/${LIB}/vndk-compat
namespace.vndk.asan.permitted.paths = /data/asan/odm/${LIB}/hw 
namespace.vndk.asan.permitted.paths += /odm/${LIB}/hw 
namespace.vndk.asan.permitted.paths += /data/asan/odm/${LIB}/egl 
namespace.vndk.asan.permitted.paths += /odm/${LIB}/egl 
namespace.vndk.asan.permitted.paths += /data/asan/vendor/${LIB}/hw 
namespace.vndk.asan.permitted.paths += /vendor/${LIB}/hw 
namespace.vndk.asan.permitted.paths += /data/asan/vendor/${LIB}/egl 
namespace.vndk.asan.permitted.paths += /vendor/${LIB}/egl
namespace.vndk.asan.permitted.paths += /data/asan/system/${LIB}/vndk-compat/hw
namespace.vndk.asan.permitted.paths +=           /system/${LIB}/vndk-compat/hw

# When these NDK libs are required inside this namespace, then it is redirected
# to the default namespace. This is possible since their ABI is stable across
# Android releases.
namespace.vndk.links = default
#namespace.vndk.link.default.shared_libs = android.hidl.memory@1.0-impl.so:libc.so:libm.so:libdl.so:libstdc++.so:liblog.so:libnativewindow.so:libEGL.so:libsync.so:libvndksupport.so:libz.so
namespace.vndk.link.default.shared_libs = libEGL.so:libGLESv1_CM.so:libGLESv2.so:libGLESv3.so:libRS.so:libandroid_net.so:libc.so:libclang_rt.asan-aarch64-android.so:libclang_rt.asan-arm-android.so:libdl.so:liblog.so:libm.so:libmediandk.so:libnativewindow.so:libneuralnetworks.so:libsync.so:libvndksupport.so:libvulkan.so:libz.so
namespace.vndk.link.default.shared_libs += libclang_rt.asan-aarch64-android.so:libclang_rt.ubsan_standalone-aarch64-android.so:libclang_rt.tsan-aarch64-android.so:libclang_rt.asan-arm-android.so:libclang_rt.ubsan_standalone-arm-android.so:libclang_rt.tsan-arm-android.s


###############################################################################
# Namespace config for vendor processes. In O, no restriction is enforced for
# them. However, in O-MR1, access to /system/${LIB} will not be allowed to
# the default namespace. 'system' namespace will be added to give limited
# (LL-NDK only) access.
###############################################################################
[vendor]
namespace.default.isolated = false
#namespace.default.search.paths = /vendor/${LIB}/hw:/vendor/${LIB}/egl:/vendor/${LIB}:/system/${LIB}/vndk-compat:/vendor/${LIB}/vndk-sp:/system/${LIB}/vndk-sp-compat:/system/${LIB}:/odm/${LIB}

#namespace.default.asan.search.paths = /data/asan/vendor/${LIB}/hw:/vendor/${LIB}/hw:/data/asan/vendor/${LIB}/egl:/vendor/${LIB}/egl:/data/asan/vendor/${LIB}:/vendor/${LIB}:/data/asan/system/${LIB}/vndk:/system/${LIB}/vndk-compat:/data/asan/vendor/${LIB}/vndk-sp:/vendor/${LIB}/vndk-sp:/data/asan/system/${LIB}/vndk-sp:/system/${LIB}/vndk-sp-compat:/data/asan/system/${LIB}:/system/${LIB}:/data/asan/odm/${LIB}:/odm/${LIB}


namespace.default.search.paths = /odm/${LIB} 
namespace.default.search.paths += /odm/${LIB}/vndk 
namespace.default.search.paths += /odm/${LIB}/vndk-sp 
namespace.default.search.paths += /vendor/${LIB} 
namespace.default.search.paths += /vendor/${LIB}/vndk 
namespace.default.search.paths += /vendor/${LIB}/vndk-sp
 # Access to system libraries are allowed
namespace.default.search.paths += /system/${LIB}/vndk-compat 
namespace.default.search.paths += /system/${LIB}/vndk-compat 
namespace.default.search.paths += /system/${LIB} 
namespace.default.search.paths += /product/${LIB}
namespace.default.asan.search.paths = /data/asan/odm/${LIB} 
namespace.default.asan.search.paths += /odm/${LIB} 
namespace.default.asan.search.paths += /data/asan/odm/${LIB}/vndk 
namespace.default.asan.search.paths += /odm/${LIB}/vndk 
namespace.default.asan.search.paths += /data/asan/odm/${LIB}/vndk-sp 
namespace.default.asan.search.paths += /odm/${LIB}/vndk-sp 
namespace.default.asan.search.paths += /data/asan/vendor/${LIB} 
namespace.default.asan.search.paths += /vendor/${LIB} 
namespace.default.asan.search.paths += /data/asan/vendor/${LIB}/vndk 
namespace.default.asan.search.paths += /vendor/${LIB}/vndk 
namespace.default.asan.search.paths += /data/asan/vendor/${LIB}/vndk-sp 
namespace.default.asan.search.paths += /vendor/${LIB}/vndk-sp 
namespace.default.asan.search.paths += /data/asan/system/${LIB}/vndk-compat 
namespace.default.asan.search.paths += /system/${LIB}/vndk-compat 
namespace.default.asan.search.paths += /data/asan/system/${LIB}/vndk-compat 
namespace.default.asan.search.paths += /system/${LIB}/vndk-compat 
namespace.default.asan.search.paths += /data/asan/system/${LIB} 
namespace.default.asan.search.paths += /system/${LIB} 
namespace.default.asan.search.paths += /data/asan/product/${LIB} 
namespace.default.asan.search.paths += /product/${LIB}




 ###############################################################################
# Namespace config for binaries under /postinstall. Only one default 
# namespace is defined and it has no directories other than /system/lib in 
# the search paths. This is because linker calls realpath on the search 
# paths and this causes selinux denial if the paths (/vendor, /odm) are not 
# allowed to the poinstall binaries. There is no reason to allow the 
# binaries to access the paths.
###############################################################################
[postinstall] 
namespace.default.isolated = false 
namespace.default.search.paths = /system/${LIB}
namespace.default.search.paths += /product/${LIB}
